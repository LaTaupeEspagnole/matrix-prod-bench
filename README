               _____  ______          _____  __  __ ______
              |  __ \|  ____|   /\   |  __ \|  \/  |  ____|
              | |__) | |__     /  \  | |  | | \  / | |__
              |  _  /|  __|   / /\ \ | |  | | |\/| |  __|
              | | \ \| |____ / ____ \| |__| | |  | | |____
              |_|  \_\______/_/    \_\_____/|_|  |_|______|

This  is  a  small  project I made to  test  the  performance of simple  multi-
threading on matrix  product  using  pthread library.  It is  using  the  naive
algorithm for the product. All main operations are implemented in the library.


----- BUILD -----

  Build the library :
    make lib          -> builds a static lib named libmatrix.a.
    make lib_debug    -> builds the lib with debug option (-g).


  Build a checker for the matrix product :
    make check        -> build a checker of the threaded  matrix  product using
                         the single-threaded matrix product.
    make chk_debug    -> Same as above but with debug option (-g).

  Build  a  bench  program  testing  the  performances  of the threaded  matrix
  function :
    make bench        -> builds the bench program.

  Build and run the test-suite:
    make test         -> builds   the  test  program   (program   that  executs
                         functions of the lib).
    make test-suite   -> builds the test program and starts the test-suite.


----- USE -----

  To use the checker program, run :
    ./check [max_mat_size]

    max_mat_size  : Max size of the matrix

    The program  will tests the threaded matrix product function by multiplying
    martices  of size 1x1 to  the size  you specified.   The  program  uses the
    single-threaded  function  to  check the result.   The tested  matrices are
    filled with random floats values using the code :
      '(float)(rand() % 10000) / 100'.

  To use the bench program, run :
    ./bench [mat_size] [nb_threads]

    mat_size      : Size of the matrix
    nb_threads    : Number of threads to use

    The program will instanciate two matrices of the size you gave and multiply
    them with each other  using the multi-threaded function of the library with
    the number of threads you gave.
    To get the duration of the product run :
      time ./bench [mat_size] [nb_threads]

  To use the test program, run :
    ./test [mat_width] [mat_height]

    See ./test help for more information.

    The program  will  create a matrix  of the size  you gave, serialize it and
    then deserialize it. It will then compare the equality of the two matrices.


----- BENCHMARKS -----

  Command used to bench :           ./bench 3000 16
  Command using numpy to compare :  ./numpy-bench.py 3000 16 (ref: 1.586984)

  +--------------+-------------+---------------+
  | After commit | Compute time | Improvement  |
  +--------------+--------------+--------------+
  |    1311372   |     2.683686 |       x 1.13 |
  |    4414957   |     3.046116 |       x 2.35 |
  |    020d512   |     7.177259 |              |
  +--------------+--------------+--------------+


----- SOURCES -----

  - https://learn.microsoft.com/en-us/cpp/intrinsics/x86-intrinsics-list
  - https://github.com/kshitijl/avx2-examples/tree/master


----- AUTHORS -----

  Sébastien GOUBEAU (sebastiengou@outlook.fr)
